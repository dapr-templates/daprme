name: Release

on:
  push:
    tags:
      - 'v*' # v0.8.1

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.15
      GOLANG_CI_LINT_VER: v1.31
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
    steps:

    - name: Setup (Go ${{ env.GOVER }})
      id: go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}

    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache
      uses: actions/cache@preview
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-

    - name: Tidy
      run: |
        go mod tidy 
        go mod vendor

    - name: Lint
      if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
      uses: golangci/golangci-lint-action@v2
      with:
        version: ${{ env.GOLANG_CI_LINT_VER }}
        only-new-issues: true

    - name: Test
      env:
        COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
      if: matrix.target_arch == 'amd64'
      run: go test -v ./...

    - name: Build
      if: matrix.target_os == 'linux' || matrix.target_os == 'darwin'
      run: |
        mkdir -p ${{ env.ARCHIVE_OUTDIR }}
        CGO_ENABLED=0 GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} go build -ldflags "-X main.Version=$(echo ${GITHUB_REF:10})" -mod vendor -o ${{ env.ARCHIVE_OUTDIR }}/daprme-${{ matrix.target_os }} .

    - name: Archive
      uses: actions/upload-artifact@v2
      with:
        name: daprme-artifacts
        path: ${{ env.ARCHIVE_OUTDIR }}

  publish:
    name: Publish
    needs: build
    if: startswith(github.ref, 'refs/tags/v')
    env:
      ARTIFACT_DIR: ./release
    runs-on: ubuntu-latest
    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: daprme-artifacts
          path: ${{ env.ARTIFACT_DIR }}

      - name: Set Release Version
        run: |
          REL_VER=$(echo ${GITHUB_REF:10})
          echo "REL_VERSION=${REL_VER}" >> $GITHUB_ENV

      - name: Upload Binaries
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          sudo npm install --silent --no-progress -g github-release-cli@1.3.1
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          export GITHUB_TOKEN=${{ secrets.RELEASE_USER_TOKEN }}
          github-release upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${REL_VERSION}" \
            --name "daprme v${REL_VERSION}" \
            --prerelease false \
            ${RELEASE_ARTIFACT[*]}