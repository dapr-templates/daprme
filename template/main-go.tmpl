package main

import (
	"context"
	"fmt"
	"log"

	"net/http"
	"os"
	"strings"

	"github.com/dapr/go-sdk/service/common"
	{{- if eq .Meta.Type "gRPC"}}
  	daprd "github.com/dapr/go-sdk/service/grpc"
	{{- end}}
	{{- if eq .Meta.Type "GHTTP"}}
	daprd "github.com/dapr/go-sdk/service/http"
	{{- end}}
	{{- if .Meta.UsesClient}}
	dapr "github.com/dapr/go-sdk/client"
	{{- end}}
)

var (
	logger     = log.New(os.Stdout, "", 0)
	{{- if ne .Meta.Type "CLI"}}
	address    = getEnvVar("ADDRESS", ":{{.Meta.Port}}")
	{{- end}}
	
	{{- if .Meta.UsesClient}}
	client dapr.Client
	{{- end}}
  
	{{- range $i, $v := .PubSubs}}
	pubSubName{{$i}} = getEnvVar("PUBSUB_NAME_{{$i}}", "{{$v.Name}}")
	topicName{{$i}}  = getEnvVar("TOPIC_NAME_{{$i}}", "{{$v.Topic}}")
    {{- end}}
)

func main() {
	{{- if eq .Meta.Type "gRPC"}}
	// create gRPC Dapr service
  	s, err := daprd.NewService(address)
	if err != nil {
		log.Fatalf("failed to start the server: %v", err)
	}
	{{- end}}
	{{- if eq .Meta.Type "HTTP"}}
	// create HTTP Dapr service
	s := daprd.NewService(address)
	{{- end}}
	{{- if .Meta.UsesClient}}
	// create Dapr client
	c, err := dapr.NewClient()
	if err != nil {
		log.Fatalf("error creating Dapr client: %v", err)
	}
	client = c
	defer client.Close()
	{{- end}}



  	{{- range $i, $v := .PubSubs}}
	// add topic subscriptions {{$i}}
	sub{{$i}} := &common.Subscription{
		PubsubName: pubSubName{{$i}},
		Topic:      topicName{{$i}},
		{{- if eq $.Meta.Type "HTTP"}}
		Route:      fmt.Sprintf("/%s", topicName),
		{{- end}}
	}
	if err := s.AddTopicEventHandler(sub{{$i}}, eventHandler); err != nil {
		logger.Fatalf("error adding subscription {{$i}}: %v", err)
	}

  	{{- end}}

	{{- range $i, $v := .Bindings}}
	// add input bindings {{$i}}
	if err := s.AddBindingInvocationHandler("{{$v.Name}}", inputHandler); err != nil {
		logger.Fatalf("error adding {{$v.Name}} binding handler: %v", err)
	}

  	{{- end}}

	{{- range $i, $v := .Services}}
	// add invocation handler {{$i}}
	if err := s.AddServiceInvocationHandler("{{$v.Name}}", invokeHandler); err != nil {
		log.Fatalf("error adding {{$v.Name}} invocation handler: %v", err)
	}

  	{{- end}}

	{{- if eq .Meta.Type "gRPC"}}
	// start service
  	if err := s.Start(); err != nil {
		log.Fatalf("server error: %v", err)
	}
	{{- end}}
	{{- if eq .Meta.Type "HTTP"}}
	// start service
	if err := s.Start(); err != nil && err != http.ErrServerClosed {
		logger.Fatalf("error starting service: %v", err)
	}
	{{- end}}
}

{{ $length := len .PubSubs }} {{- if gt $length 0 }}
func eventHandler(ctx context.Context, e *common.TopicEvent) (retry bool, err error) {
	logger.Printf(
		"event - PubsubName:%s, Topic:%s, ID:%s, Data: %v",
		e.PubsubName, e.Topic, e.ID, e.Data,
	)

	// TODO: do something with the cloud event data

	return false, nil
}
{{- end}}

{{ $length := len .Bindings }} {{- if gt $length 0 }}
func inputHandler(ctx context.Context, in *common.BindingEvent) (out []byte, err error) {
	logger.Printf("Binding - Metadata:%v, Data:%v", in.Metadata, in.Data)

	// TODO: do something with the cloud event data

	return nil, nil
}
{{- end}}


{{ $length := len .Services }} {{- if gt $length 0 }}
func invokeHandler(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {
	logger.Printf("Invocation (ContentType:%s, Verb:%s, QueryString:%s, Data:%s)",
		in.ContentType, in.Verb, in.QueryString, string(in.Data))

	// TODO: implement handling logic here

	out = &common.Content{
		ContentType: in.ContentType,
		Data:        in.Data,
	}

	return
}
{{- end}}


func getEnvVar(key, fallbackValue string) string {
	if val, ok := os.LookupEnv(key); ok {
		return strings.TrimSpace(val)
	}
	return fallbackValue
}