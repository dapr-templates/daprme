package main

import (
	"context"
	"fmt"
	"log"

	"net/http"
	"os"
	"strings"

	"github.com/dapr/go-sdk/service/common"
  {{- if eq .Protocol "HTTP"}}
	daprd "github.com/dapr/go-sdk/service/http"
  {{- else}}
  daprd "github.com/dapr/go-sdk/service/grpc"
  {{- end}}
)




namespace {{.Helper.AsPackageName .Namespace}}
{
  {{- with .Identity}}
  public class {{$.Helper.AsIdentityName .DisplayName}}State
  {
    {{- range .Contents}}
      {{- if eq .Type "Relationship"}}
        {{- range .Properties}}
          {{- if $.Helper.IsUnique .Name}}
    public {{$.Helper.AsTypeName .Schema}} {{$.Helper.AsPropertyName .Name}} { get; set; }
          {{- end}}
        {{- end}}
      {{- else}}
    public {{$.Helper.AsTypeName .Schema}} {{$.Helper.AsPropertyName .Name}} { get; set; }
      {{- end}}
    {{- end}}
  }
  {{- end}}

  {{- with .Identity}}
  public class {{$.Helper.AsIdentityName .DisplayName}} : Twin<{{$.Helper.AsIdentityName .DisplayName}}State>
  {
    public {{$.Helper.AsIdentityName .DisplayName}}(ActorService service, ActorId actorId) : base(service, actorId)
    {
    }
    public override Task OnEvent(TwinEvent @event)
    {
        base.OnEvent(@event);
        
        Console.WriteLine($"Received Event: {@event.Data}");
        return Task.CompletedTask;
    }

    public override Task OnCommand(TwinCommand command)
    {
        Console.WriteLine($"Received Command: {command.Name}: {command.Data}");
        return Task.CompletedTask;
    }
  }
  {{- end}}
}